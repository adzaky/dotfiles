#!/usr/bin/env bash

col() {
    if [[ -z "$1" ]]; then
        echo -e "\033[0m"
    else
        echo -e "\033[0;3${1}m"
    fi
}

log() {
    local app="$(col 5)aenvk$(col)"
    if [[ -z "$TAG" ]]; then
        echo -e "$app: $@"
    else
        echo -e "$app-$(col 4)$TAG$(col): $@"
    fi
}

abort() {
    log "$(col 1)$@$(col)"
    exit 1
}

mk() {
    local TAG=build
    local msbegin=$(date +%s.%N)
    local loginfo=$ENVK_BUILD_DIR/mk.build.log
    local logerr=$ENVK_BUILD_DIR/mk.error.log

    if ! mkdir -p $ENVK_BUILD_DIR 2>/dev/null; then
        abort "failed to prepare build dir at $ENVK_BUILD_DIR. exiting"
    fi

    mkdir -p $ENVK_BUILD_DIR
    if [[ -z $ENVK_BUILD_VERSION ]]; then
        log "Building kernel"
        rm -f $KERNEL_DIR/.scmversion
    else
        log "Building kernel, version $ENVK_BUILD_VERSION"
        echo "-$ENVK_BUILD_VERSION" >$KERNEL_DIR/.scmversion
    fi

    local proc=$(nproc --all)
    if [[ "$proc" -lt 8 ]]; then
        proc=$((proc - 1))
    fi

    make -j$proc \
        -C $KERNEL_DIR O=$ENVK_BUILD_DIR \
        ARCH=arm64 \
        CLANG_TRIPLE=aarch64-linux-gnu- \
        $ENVK_ADDITIONAL_FLAGS \
        $@ > >(tee ${loginfo}) 2> >(tee ${logerr} >&2)

    if [[ "$ENVK_WITH_DTBO" == "1" && "$@" == "" ]]; then
        applet_dtbo
    fi

    local msdiff=$(echo "$(date +%s.%N) - $msbegin" | bc)
    log "Took $msdiff seconds"
}

#
# aenvk's applets
#

applet_info() {
    local clang=$(clang -v |& sed -e '1!d;s/ (http.\+)//g')
    echo "Compiler: $clang"
    echo "Output: $ENVK_BUILD_DIR"
    echo "Target: $KERNEL_DIR"
    if [[ -z ENVK_BUILD_VERSION ]]; then
        echo "Version: $ENVK_BUILD_VERSION"
    fi
    exit
}

applet_dtbo() {
    local TAG=dtbo
    local bootdir=$ENVK_BUILD_DIR/arch/arm64/boot
    local dtout=$bootdir/dtbo.img
    local mkdt=$ENVK_LIBUFDT_PATH/utils/src/mkdtboimg.py
    local overlays=$(find $bootdir/dts -iname '*-overlay.dtbo' -print)
    if [[ ! -f $mkdt ]]; then
        abort "$mkdt does not exists. exiting"
    fi

    if [[ $(wc -l <<<$overlays) -gt 0 ]]; then
        log "Building dtbo.img"
        python $mkdt create $dtout $overlays
        log "Build done: $dtout"
    else
        log "There's no overlays found at $bootdir/dts"
    fi
    return $?
}

applet_saveconf() {
    local TAG=saveconf
    if [[ -z $ENVK_BUILD_CONFIG ]]; then
        log "You have to set ENVK_BUILD_CONFIG before, for example: "
        log "    $ export ENVK_BUILD_CONFIG=vayu_defconfig"
    else
        mk savedefconfig
        cp $ENVK_BUILD_DIR/defconfig $KERNEL_DIR/arch/arm64/configs/$ENVK_BUILD_CONFIG
    fi
    exit $?
}

applet_am() {
    local TAG=am
    local co=cherry.patch
    local uri=$(cut -d\# -f1 <<<$1)
    log "Applying patch from $uri"
    curl -o $co $uri.patch && git am <$co && rm $co
}

applet_reset() {
    local TAG=reset
    log "Resetting kernel build version"
    if [[ -d $ENVK_BUILD_DIR ]]; then
        echo 0 >$ENVK_BUILD_DIR/.version
    fi
}

applet_aospbin() {
    local TAG=aospbin
    local target=$1
    log "Install binary and headers for AOSP at $target"
    mkdir -p $target/kernel-headers

    local result=$(realpath $target/kernel-headers)
    mk headers_install ARCH=arm64 INSTALL_HDR_PATH=$result
    log "Removing unused files"
    find $result -type f -not -iname "*.h" -delete
    find $result -empty -type d -delete

    local bootdir=$ENVK_BUILD_DIR/arch/arm64/boot
    local kernel=$bootdir/Image
    if [ ! -f "$kernel" ]; then
        abort "kernel binary cannot be found, build it first"
    fi

    cp $kernel $bootdir/dtbo.img $target
    find $bootdir/dts/qcom -name "*.dtb" -exec cat {} + >$target/dtb.img
}

applet_init() {
    local TAG=init
    if [[ -f "$KERNEL_DIR/.aenvkconfig" ]]; then
        abort ".aenvkconfig already exists"
    fi

    cat <<\EOF >$KERNEL_DIR/.aenvkconfig
#
# aenvk build configuration
#

# tools paths
ENVK_ADDITIONAL_PATH=/android/prebuilts/clang/host/linux-x86/clang-r416183b1/bin:/android/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin:/android/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/bin
ENVK_LIBUFDT_PATH=/android/system/libufdt
ENVK_ADDITIONAL_FLAGS="LLVM=1"

# cross-compile path (for vdso32)
CROSS_COMPILE=aarch64-linux-android-
CROSS_COMPILE_ARM32=arm-linux-androideabi-

# build options
ENVK_BUILD_CONFIG=vayu_defconfig
ENVK_BUILD_DIR=/android/out/target/product/vayu/obj/KERNEL_OBJ
# export ENVK_BUILD_VERSION=r1
ENVK_WITH_DTBO=1

EOF
    log "Initial config created at $KERNEL_DIR/.aenvkconfig"
}

usage() {
    cat <<\EOF
Usage:
  aenvk [options] <parameters>

Options:
  -a, --applet <aenvk's-applet>      Run aenvk's applet functions
  -x, --exec <make-cmds>           Run make commands

Example workflow:
  # Prepare for clean-build kernel
  $ aenvk -x mrproper

  # apply custom defconfig that stored at arch/arm64/configs
  $ aenvk -x fischl_defconfig

  # run build process
  $ aenvk

Applets:
    Applets are an internal functions that can be executed
    directly for the sake of simplicity

    - init (Initializing config for the kernel build)
    - info (Print current kernel setup)
    - dtbo (Create DTBO image)
    - am (applying patch from url)
    - saveconf (Save defconfig to $ENVK_BUILD_CONFIG)
    - reset (resetting kernel build version)
    - aospbin (Install binary and headers for AOSP)
        Usage:
            aenvk -a aospbin <path/to/kernel/binary/tree>
        Example:
            aenvk -a aospbin /android/device/xiaomi/vayu-kernel

EOF
    exit
}

if (return 0 2>/dev/null || [[ $ZSH_EVAL_CONTEXT =~ :file$ ]]); then
    usage
    exit 1
fi

unset TAG
KERNEL_DIR=${KERNEL_DIR:-$(pwd)}
opts=$(getopt -a -n aenvk -o hk:x:a: --long help,kernel:,exec:,applet:, -- "$@")
vopts=$?
if [ "$vopts" != "0" ]; then
    usage
fi

eval set -- "$opts"

fullargs=($@)
while :; do
    case "$1" in
    -k | --kernel)
        KERNEL_DIR="$2"
        shift 2
        ;;
    -x | --exec)
        make_exec="$2"
        shift 2
        ;;
    -a | --applet)
        applet="$2"
        applet_args="$4"
        shift 2
        ;;
    -h | --help) usage ;;
    --)
        shift
        break
        ;;
    *)
        echo "Unexpected option: $1"
        usage
        ;;
    esac
done

log "Using $KERNEL_DIR as kernel source"

if [[ "$applet" == "init" ]]; then
    applet_${applet} $applet_args
    exit $?
fi

if [[ -f "$KERNEL_DIR/.aenvkconfig" ]]; then
    DOTENV="$KERNEL_DIR/.aenvkconfig"
fi

if [[ -z $DOTENV ]]; then
    abort "No .aenvkconfig available. exiting"
fi

source $DOTENV

if [[ -n $CROSS_COMPILE ]]; then
    export CROSS_COMPILE
fi
if [[ -n $CROSS_COMPILE_ARM32 ]]; then
    export CROSS_COMPILE_ARM32
fi
if [[ -n $CROSS_COMPILE_COMPAT ]]; then
    export CROSS_COMPILE_COMPAT
fi
if [[ -n $ENVK_ADDITIONAL_PATH ]]; then
    export PATH="$ENVK_ADDITIONAL_PATH:$PATH"
    if which clang 2 &>/dev/null; then
        CLANG_PATH=$(realpath $(dirname $(which clang))/..)
        export LD_LIBRARY_PATH="$CLANG_PATH/lib64:$LD_LIBRARY_PATH"
    fi
fi

# set ccache
export PATH="/usr/lib/ccache/bin/:$PATH"
KERNEL_DIR=$(realpath $KERNEL_DIR)

if [[ -n "$applet" ]]; then
    applet_${applet} $applet_args
    exit $?
fi

if [[ -n "$make_exec" ]]; then
    mk "$make_exec"
    exit $?
fi

if [[ "$vopts" == "0" ]]; then
    mk
fi
